{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  const {\n    image,\n    title,\n    address,\n    description\n  } = props.meetupData;\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: description\n      })]\n    }), /*#__PURE__*/_jsx(MeetupDetail, {\n      image: image,\n      title: title,\n      address: address,\n      description: description\n    })]\n  });\n};\n\nconst getMongoDbCollection = async (dbName, collectionName) => {\n  const client = await MongoClient.connect();\n  const db = client.db();\n  const collection = db.collection(collectionName);\n  return {\n    collection,\n    client\n  };\n};\n\nconst fetchMeetups = async () => {\n  const {\n    collection: meetupsCollection,\n    client\n  } = await getMongoDbCollection(\"meetups\", \"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return meetups;\n};\n\nconst fetchMeetupById = async meetupId => {\n  const {\n    collection: meetupsCollection,\n    client\n  } = await getMongoDbCollection(\"meetups\", \"meetups\");\n  const meetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return meetup;\n};\n\nexport const getStaticPaths = async () => {\n  const meetups = await fetchMeetups();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // paths: [{ params: { meetupId: \"m1\" } }, { params: { meetupId: \"m2\" } }],\n\n  };\n};\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const meetup = await fetchMeetupById(meetupId);\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        id: meetup._id.toString(),\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        description: meetup.description\n      }\n    }\n  };\n};\nexport default MeetupDetails;","map":null,"metadata":{},"sourceType":"module"}